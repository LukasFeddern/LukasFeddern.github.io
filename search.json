[
  {
    "objectID": "survey.html",
    "href": "survey.html",
    "title": "Survey Data Analysis",
    "section": "",
    "text": "RStata\n\n\nfizz_buzz <- function(fbnums = 1:50) {\n  output <- dplyr::case_when(\n    fbnums %% 15 == 0 ~ \"FizzBuzz\",\n    fbnums %% 3 == 0 ~ \"Fizz\",\n    fbnums %% 5 == 0 ~ \"Buzz\",\n    TRUE ~ as.character(fbnums)\n  )\n  print(output)\n}\n\n\n\nuse nile.dta"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "For participants interested in learning R, the ‘Getting Started’ section guides through installation and set up of R and R Studio. The ‘Basics’ section contains example code and explanations on how to import, manage, and manipulate data in both R and Stata. The sections ‘Quantitative Analysis’ and ‘Survey Data Analysis’ complement the workshop sessions and provide example code as well as exercises. The ‘Resources’ tab includes a list of additional resources if you are interested in pursuing the topics of the workshop further."
  },
  {
    "objectID": "Solution1.html",
    "href": "Solution1.html",
    "title": "Solution 1",
    "section": "",
    "text": "RStata\n\n\ngetwd()\n\n\n\npwd\n\n\n\n\n\n\n\n\nRStata\n\n\n\n\n\nperu <- read.csv(file = \"https://raw.githubusercontent.com/LukasFeddern/Workshop/main/peru.csv\")\nsave(peru, file = \"peru.RData\")\n\n\n\n\n\ninstall.packages(\"readr\", repos='http://cran.us.r-project.org')\nlibrary(readr)\nperu <- read_csv(file = \"https://raw.githubusercontent.com/LukasFeddern/Workshop/main/peru.csv\")\nsave(peru, file = \"peru.RData\")\n\n\n\n\n\ninstall.packages(\"readr\", repos='http://cran.us.r-project.org')\nlibrary(readr)\nperu <- read_delim(file = \"https://raw.githubusercontent.com/LukasFeddern/Workshop/main/peru.csv\",delim = \",\")\nsave(peru, file = \"peru.RData\")\n\n\n\n\n\nimport delimited https://raw.githubusercontent.com/LukasFeddern/Workshop/main/peru.csv\n\nsave \"peru\"\n\n\n\n\n\n\n\n\nRStata\n\n\n\n\n\nsummary(peru)\n\n     PTID            Heights..cm.    age_range              age       \n Length:2014        Min.   : 56.0   Length:2014        Min.   : 1.00  \n Class :character   1st Qu.:125.0   Class :character   1st Qu.:14.00  \n Mode  :character   Median :166.0   Mode  :character   Median :29.00  \n                    Mean   :148.9                      Mean   :32.92  \n                    3rd Qu.:175.0                      3rd Qu.:49.00  \n                    Max.   :183.0                      Max.   :89.00  \n    gender           job_status        workingoutsidehome public_transportation\n Length:2014        Length:2014        Length:2014        Length:2014          \n Class :character   Class :character   Class :character   Class :character     \n Mode  :character   Mode  :character   Mode  :character   Mode  :character     \n                                                                               \n                                                                               \n                                                                               \n household_contact  previoustest       study_RDT_result     type_ab         \n Length:2014        Length:2014        Length:2014        Length:2014       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n   diabetes         cardiovascular       obesity             fever          \n Length:2014        Length:2014        Length:2014        Length:2014       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n nasalcongestion    breathdifficulty   generaldiscomfort    diarrhea        \n Length:2014        Length:2014        Length:2014        Length:2014       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    nausea            cefalea             cough            sorethroat       \n Length:2014        Length:2014        Length:2014        Length:2014       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n anysymptoms        symptoms3cat      \n Length:2014        Length:2014       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n\n\n\n\n\n\ninstall.packages(\"tidyverse\", repos='http://cran.us.r-project.org')\n\n\nThe downloaded binary packages are in\n    /var/folders/zr/fkpnf7r112g3q4sn6hqvwcmh0000gn/T//Rtmpl5hXxS/downloaded_packages\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.7     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nglimpse(peru)\n\nRows: 2,014\nColumns: 26\n$ PTID                  <chr> \"026214-0182-3\", \"026214-0899-4\", \"026214-1648-5…\n$ Heights..cm.          <dbl> 75, 76, 78, 72, 91, 58, 64, 72, 82, 59, 82, 106,…\n$ age_range             <chr> \"0-11\", \"0-11\", \"0-11\", \"0-11\", \"0-11\", \"0-11\", …\n$ age                   <int> 8, 4, 6, 11, 6, 5, 7, 6, 5, 10, 7, 8, 11, 10, 9,…\n$ gender                <chr> \"male\", \"male\", \"male\", \"female\", \"male\", \"femal…\n$ job_status            <chr> \"student\", \"student\", \"student\", \"unemployed\", \"…\n$ workingoutsidehome    <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ public_transportation <chr> \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\",…\n$ household_contact     <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\", \"no\",…\n$ previoustest          <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ study_RDT_result      <chr> \"no reactive\", \"no reactive\", \"reactive\", \"no re…\n$ type_ab               <chr> \"\", \"\", \"IgM-IgG\", \"\", \"\", \"\", \"IgG\", \"IgM-IgG\",…\n$ diabetes              <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ cardiovascular        <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ obesity               <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ fever                 <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"Had, …\n$ nasalcongestion       <chr> \"Had, within 9 months\", \"Currently have\", \"no\", …\n$ breathdifficulty      <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ generaldiscomfort     <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ diarrhea              <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ nausea                <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ cefalea               <chr> \"no\", \"Currently have\", \"no\", \"no\", \"no\", \"no\", …\n$ cough                 <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"Had, …\n$ sorethroat            <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ anysymptoms           <chr> \"symptomatic\", \"symptomatic\", \"asymptomatic\", \"s…\n$ symptoms3cat          <chr> \"Had, within 9 months\", \"Currently have\", \"no\", …\n\n\n\n\n\n\ninstall.packages(\"skimr\", repos='http://cran.us.r-project.org')\n\n\nThe downloaded binary packages are in\n    /var/folders/zr/fkpnf7r112g3q4sn6hqvwcmh0000gn/T//Rtmpl5hXxS/downloaded_packages\n\nlibrary(skimr)\nskim(peru)\n\n\nData summary\n\n\nName\nperu\n\n\nNumber of rows\n2014\n\n\nNumber of columns\n26\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n24\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nPTID\n0\n1\n13\n14\n0\n2014\n0\n\n\nage_range\n0\n1\n4\n5\n0\n5\n0\n\n\ngender\n0\n1\n4\n6\n0\n2\n0\n\n\njob_status\n0\n1\n7\n13\n0\n6\n0\n\n\nworkingoutsidehome\n0\n1\n2\n3\n0\n2\n0\n\n\npublic_transportation\n0\n1\n2\n3\n0\n2\n0\n\n\nhousehold_contact\n0\n1\n2\n3\n0\n2\n0\n\n\nprevioustest\n0\n1\n2\n3\n0\n2\n0\n\n\nstudy_RDT_result\n0\n1\n8\n11\n0\n2\n0\n\n\ntype_ab\n0\n1\n0\n7\n1513\n4\n0\n\n\ndiabetes\n0\n1\n2\n3\n0\n2\n0\n\n\ncardiovascular\n0\n1\n2\n3\n0\n2\n0\n\n\nobesity\n0\n1\n2\n3\n0\n2\n0\n\n\nfever\n0\n1\n2\n20\n0\n3\n0\n\n\nnasalcongestion\n0\n1\n2\n20\n0\n3\n0\n\n\nbreathdifficulty\n0\n1\n2\n20\n0\n3\n0\n\n\ngeneraldiscomfort\n0\n1\n2\n20\n0\n3\n0\n\n\ndiarrhea\n0\n1\n2\n20\n0\n3\n0\n\n\nnausea\n0\n1\n2\n20\n0\n3\n0\n\n\ncefalea\n0\n1\n2\n20\n0\n3\n0\n\n\ncough\n0\n1\n2\n20\n0\n3\n0\n\n\nsorethroat\n0\n1\n2\n20\n0\n3\n0\n\n\nanysymptoms\n0\n1\n11\n12\n0\n2\n0\n\n\nsymptoms3cat\n0\n1\n2\n20\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeights..cm.\n0\n1\n148.95\n37.33\n56\n125\n166\n175\n183\n▁▁▁▁▇\n\n\nage\n0\n1\n32.92\n22.46\n1\n14\n29\n49\n89\n▇▆▅▃▂\n\n\n\n\n\n\n\n\n\ninstall.packages(\"labelled\", repos='http://cran.us.r-project.org')\n\n\nThe downloaded binary packages are in\n    /var/folders/zr/fkpnf7r112g3q4sn6hqvwcmh0000gn/T//Rtmpl5hXxS/downloaded_packages\n\nlibrary(labelled)\nlook_for(peru)\n\n pos variable              label col_type values\n 1   PTID                  —     chr            \n 2   Heights..cm.          —     dbl            \n 3   age_range             —     chr            \n 4   age                   —     int            \n 5   gender                —     chr            \n 6   job_status            —     chr            \n 7   workingoutsidehome    —     chr            \n 8   public_transportation —     chr            \n 9   household_contact     —     chr            \n 10  previoustest          —     chr            \n 11  study_RDT_result      —     chr            \n 12  type_ab               —     chr            \n 13  diabetes              —     chr            \n 14  cardiovascular        —     chr            \n 15  obesity               —     chr            \n 16  fever                 —     chr            \n 17  nasalcongestion       —     chr            \n 18  breathdifficulty      —     chr            \n 19  generaldiscomfort     —     chr            \n 20  diarrhea              —     chr            \n 21  nausea                —     chr            \n 22  cefalea               —     chr            \n 23  cough                 —     chr            \n 24  sorethroat            —     chr            \n 25  anysymptoms           —     chr            \n 26  symptoms3cat          —     chr            \n\n\n\n\n\n\n\n\ndescribe\n\n\n\n\n\nsummarize\n\n\n\n\n\n\n\n\n\nRStata\n\n\n\ninstall.packages(\"Hmisc\", repos='http://cran.us.r-project.org')\n\n\nThe downloaded binary packages are in\n    /var/folders/zr/fkpnf7r112g3q4sn6hqvwcmh0000gn/T//Rtmpl5hXxS/downloaded_packages\n\nHmisc::label(peru$cardiovascular) <- \"cardiovascular diseases\"\n\n\n\n\nlabel variable cardiovascular \"cardiovascular diseases\"\n\n\n\n\n\n\n\n\nRStata\n\n\n\n\n\nnames(peru)[names(peru)== \"Heights..cm.\"] <- \"height\"\nHmisc::label(peru$height) <- \"height (cm)\"\n\n\n\n\n\nperu <- rename(peru, \"height\" = \"Heights..cm.\")\nHmisc::label(peru$height) <- \"height (cm)\"\n\n\n\n\n\nrename Heightscm height\nlabel variable cardiovascular \"height (cm)\"\n\n\n\n\n\n\n\n\nRStata\n\n\n\nsum(is.na(peru$rdt)) \n\n[1] 0\n\n\nTo investigate which rows have missing values for the variable rdt we can subset the data set. Since is.na(peru$rdt) is a one dimensional logical vector, we need to specify which columns to select. Not specifying the columns (i.e. leaving it blank) will show you all columns.\n\nperu[is.na(peru$rdt),]\n\n [1] PTID                  height                age_range            \n [4] age                   gender                job_status           \n [7] workingoutsidehome    public_transportation household_contact    \n[10] previoustest          study_RDT_result      type_ab              \n[13] diabetes              cardiovascular        obesity              \n[16] fever                 nasalcongestion       breathdifficulty     \n[19] generaldiscomfort     diarrhea              nausea               \n[22] cefalea               cough                 sorethroat           \n[25] anysymptoms           symptoms3cat         \n<0 rows> (or 0-length row.names)\n\n\n\n\n\nfindit mdesc\nmdesc rdt\n\n\n\n\n\n\n\n\nRStata\n\n\nNote that options 3 and 4 use across(). This command specifies that you want to apply a function across specific columns.\n\n\n\nperu[peru==\"Had, within 9 months\"|peru==\"Currently have\"] <- \"yes\"\n\n\n\n\n\nperu <- mutate(peru, \nfever = ifelse(fever==\"Had, within 9 months\"|fever==\"Currently have\", \"yes\", fever),\nnasalcongestion = ifelse(nasalcongestion==\"Had, within 9 months\"|nasalcongestion==\"Currently have\", \"yes\", nasalcongestion),\nbreathdifficulty = ifelse(breathdifficulty==\"Had, within 9 months\"|breathdifficulty==\"Currently have\", \"yes\", breathdifficulty),\ngeneraldiscomfort = ifelse(generaldiscomfort==\"Had, within 9 months\"|generaldiscomfort==\"Currently have\", \"yes\", generaldiscomfort),\ndiarrhea = ifelse(diarrhea==\"Had, within 9 months\"|diarrhea==\"Currently have\", \"yes\", diarrhea),\nnausea = ifelse(nausea==\"Had, within 9 months\"|nausea==\"Currently have\", \"yes\", nausea),\ncefalea = ifelse(cefalea==\"Had, within 9 months\"|cefalea==\"Currently have\", \"yes\", cefalea),\ncough = ifelse(cough==\"Had, within 9 months\"|cough==\"Currently have\", \"yes\", cough),\nsorethroat = ifelse(sorethroat==\"Had, within 9 months\"|sorethroat==\"Currently have\", \"yes\", sorethroat),\nsymptoms3cat = ifelse(sorethroat==\"Had, within 9 months\"|sorethroat==\"Currently have\", \"yes\", symptoms3cat)\n)\n\n\n\n\n\nperu <- mutate(peru, \nacross(.cols = c(fever:sorethroat, symptoms3cat),\n~case_when(.==\"Had, within 9 months\"| .==\"Currently have\"~\"yes\",\n!(.==\"Had, within 9 months\"| .==\"Currently have\") ~ .)))\n\n\n\n\n\nperu <- mutate(peru, \nacross(.cols = fever:sorethroat,\n~recode(.x, \"Had, within 9 months\" = \"yes\", \"Currently have\" = \"yes\")))\n\n\n\n\n\nreplace fever = \"yes\" if fever = \"Had, within 9 months\"|fever=\"Currently have\"\nreplace nasalcongestion = \"yes\" if nasalcongestion = \"Had, within 9 months\"|nasalcongestion=\"Currently have\"\nreplace breathdifficulty = \"yes\" if breathdifficulty = \"Had, within 9 months\"|breathdifficulty=\"Currently have\"\nreplace generaldiscomfort = \"yes\" if generaldiscomfort = \"Had, within 9 months\"|generaldiscomfort=\"Currently have\"\nreplace diarrhea = \"yes\" if diarrhea = \"Had, within 9 months\"|diarrhea=\"Currently have\"\nreplace nausea = \"yes\" if nausea = \"Had, within 9 months\"|nausea=\"Currently have\"\nreplace cefalea = \"yes\" if cefalea = \"Had, within 9 months\"|cefalea=\"Currently have\"\nreplace cough = \"yes\" if cough = \"Had, within 9 months\"|cough=\"Currently have\"\nreplace sorethroat = \"yes\" if sorethroat = \"Had, within 9 months\"|sorethroat=\"Currently have\"\nreplace symotoms3cat = \"yes\" if symotoms3cat = \"Had, within 9 months\"|symotoms3cat=\"Currently have\""
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Getting Started",
    "section": "",
    "text": "This is a brief introduction to R. It is supposed to guide you through the installation of R and R Studio.\n\n\nR is a programming language and a free, open-source software for statistical computing and graphing. It is widely used in academia and industry alike. Beyond its base functionality, R can be extended through packages. This allows for additional flexibility in its application. Applications include reproducible transfer, management, analysis, modeling, and presentation of data.\n\n\n\nYou can download the most recent version of R through the Comprehensive R Archive Network. The Comprehensive R Archive Network (CRAN) is the official network that stores and releases the most up to date versions of R. If you use a Windows operating system, please follow this link to download the most recent version of R. If you are using a Mac operating system, please follow this link to download the most recent version of R. Please complete the installation on your local computer by opening the respective file from your Downloads folder. To make sure you installed R successfully, please open the program on your computer. The window should look similar to the images below. If you are using a Mac operatings system, your R window should look similar to the image on the left. If your computer uses a Microsoft Windows operating system, your R program should look like the screenshot on the right. Please note that the first line diplays the version number of R. Your version might differ from the one shown in the screeenshot.\n\n\n\n\n\n\n\n(a) R Console Mac OS\n\n\n\n\n\n\n\nR Console Microsoft OS\n\n\n\n\nFigure 1: R Console in Mac and Windows\n\n\n\n\n\nR Studio is separate from R. In fact, it is an integrated development environment, or IDE, that serves as an editor, and thus makes for a more user-friendly application of R. R Studio is not limited to the use of R, however. You can create Markdown documents, Shiny web applications, C++, Python, SQL, and many more file types using R Studio. For the workshop, we will focus on R files.\n\n\n\nYou can download the free non-commercial version of R Studio here. Please click the button to download the version that matches your operating system. Once the download is complete, please open R Studio and complete the installation. Importantly, for R Studio to run, you need to install R first!\nThe screenshot below should reflect what you are seeing when first opening R Studio. As you can see the R Studio user-interface is split into four panes, or tiles. You can hide and unhide each pane by clicking on the window symobols highlighted by the arrows in the screenshot. The small window hides the pane, and the large widnow unhides it.\n\n\n\nFigure 2: R Studio\n\n\n\n\n\nAs a default setting R Studio shows the console in the bottom left corner. As you can see, the console looks similar to the R program that you installed earlier. Everytime you open R Studio, the console displays the version of R you are currently using. In the previous screenshot, we are using R version 4.2.0. The console allows you type and execute R code. Be aware, however, that code you write in the console is not reporducible. It will not be saved when you close your R session. You can however, see the previously executed code in the top right pane by clicking on the ‘History’ tab.\n\nIn the top left corner you find the source pane. Typically, this is where you write your reproducible code, and view files, or tables. If you wish to open a new code file, you click on the symbol in the top left corner, as shown in the picture below or press Ctrl+Shift+N. Next, you will see a selection of possible file types. To the right of the file symbole, you find the project symbol. Projects are overarching structures that organize your files.\n\n\nThe top right pane displays your environment. The environment contains functions, data frames, and variables that you create. You can open and expand elements in the environment by clicking on them.\nFinally, the bottom right pane shows the files included in your working directory. It also shows the plots you have created, the installed, and loaded packages, documentation, and the Viewer. Each function of the pane can be selected by clicking on the respective tabs.\n\n\n\nTo run your first bit of code and to familiarize yourself with the console and the source pane copy the following code in each pane.\n\nprint(\"Hello, world!\")\n\nTo run code in the console simply press Enter.\nAfter pasting the code in the source pane press Ctrl +Enter. To run code in the source pane, you can alternatively press run in the top right corner of the source pane.\nCongratulations, you have executed your first line of R code!\nThe next section introduces you to workflow in R and Stata, as well as some basic data types."
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "Basics",
    "section": "",
    "text": "R sessions and especially the files connected to them can get confusing quickly. Specifying a working directory helps to structure your files and eases reading, saving, and writing files during your R Session. Directories are folders. A working directory is the parent folder that should contain your R code and any references files, such as data sets. So before we start using R, please create a folder (for instance on your Desktop) for all exercises and files used throught the workshop. In the following code examples, this folder will be called ‘Workshop’.\n\nIn order to find out what the working directory of your R session is, try out the following code:\n\ngetwd()\n\nIf you want to change your working directory you can use the setwd() command. It takes the desired path as input. Be sure to wrap the path in quotes.\n\nsetwd(path)\n\n\n\n\nPackages are one of the keys to using R. They contain a number of functions, compiled code, and data sets that are available to you after installing and calling the package. The functions were written by the R Community and are checked and updated continuously for the most common popular packages. Unlike for other statistical programs, such as Stata, there is no technical support, however, or any technical warranties. Just bare in mind that packages that are no longer supported, outdated, or not checked might contain mistakes. All packages we use in this workshop are supported as of the date of the course.\n\nIn order to use the packages, you need to install and load each package. You can install packages by running the install.packages() command. It takes the name of your package in quotes as input.\n\ninstall.packages(\"Name of your package\")\n\nBefore using a package you need to call and load it. The library() command allows you to do exactly that. Note that unlike install.packages() the package name is not in quotes.\n\nlibrary(Name of your package)\n\nYou can install and call packages manually by clicking on the ‘Packages’ tab in the bottom right pane and selecting ‘Install’. There should be a pop-up window where you can specify the package to be installed. After the installation, look for the package in the bottom right pane and simply check the box to the left of the name. This will call the package. It is now ready to be used.\n\nBe aware that some packages contain functions with the same name. As a result, R will use the package from the more recently called package and mask the function from the older package. If you need the function from the previous package simply specify the package name before calling the function.\n\npackage::function()\n\nTyping :: after the package name will also show a dropdown of all the different functions and data sets contained in a package.\n\nIf you need help with any package or function ? or help() can be useful. In the example below, we try and get more information on the ‘tidyverse’ package\n\n?tidyverse\nhelp(tidyverse)\n\n\n\n\nYou can assign any type of data to an object name. If you want to retrieve the data simply call the object name. Data can be assigned to an object name using the <- operator. In this example 3 is assigned the object name ‘x’. We call ‘x’ simly by running it.\n\nx <- 3\nx\n\n[1] 3\n\n\n\n\n\nR offers support for a number of different data formats. Base R, that is the preinstalled functions in R, enable you to import and export text files, such as .csv files. As you will see, the packages foreign, haven, readxl, and readr will allow you to import Stata, SAS, SPSS, as well as Microsoft Excel files.\n\n\n\nThe following code shows how to import a csv using the pre-installed ‘utils’ package. It takes the file path in quotation as input and shows the data set. Importantly the file path is relative to your working directory.\n\nread.csv(path)\n\n\nThis also works with urls as input.\n\n\nread.csv(url)\n\nAlternatively, you can use the read_csv() function from the tidyverse.\n\nread_csv(path)\n\n\n\n\nYou can import Excel files using the readxl package.\n\nreadxl::read_excel(path)\n\n\n\n\nYou can import Stata files using the haven package.\n\nhaven::read_dta(path)\n\n\n\n\nYou can import SPSS files using the haven package.\n\nhaven::read_spss(path)\n\n\n\n\nYou can import SAS files using the haven package.\n\nhaven::read_sas(path)\n\n\n\n\nThe ‘haven’ package allows you to import many different file formats. If you want to import data from an SQL data base, you can use the ‘DBI’ package. But this exceeds the scope of this introduction to R.\n\n\n\nWhen importing data, you might need to adjust the encoding of text data. For instance, R does not automatically adjust the encoding for French. For example: You import data containing the French language names of health facilities or locations. If you do not adjust the encoding, the names might look strange, containing symbols such as  Ã©ª . To prevent this, you can add an encoding option to your import code.\n\nread.csv(path, encoding=\"UTF-8\")\n\nUTF-8 should display all the characters correctly. This encoding option also exists in the ‘haven’ and ‘readr’ package. The ‘readxl’ package automatically uses the UTF-8 encoding.\n\n\n\nAs with installing and loading packages, R Studio allows you to import data manually. As shown in the screenshot you can click on the ‘Environment’ tab in the top right pane and then select ‘Import Dataset’. You can then select the corresponding file format. Alternatively you can click on ‘File’ all the way on top left of your screen and select ‘Import Dataset’ there. After selecting the file type, you will see a pop up window allowing you to manually select the file from your computer’s Explorer/Finder by clicking on ‘Browse’ in the top right corner.\n\n\n\n\nSimilar to the examples above, a data set is an object to which an object name can be assigned. This code reads a csv and assigns the output name ‘df’ to the output.\n\ndf <- read.csv(path)\n\nGenerally, it is advisable to use short but meaningful object names.\nYou can choose to save the data set after importing it using the save() function. You can also choose to export your data set into a format other than Rdata. Depending on the format of your choosing this can be done using the write.csv() command. It takes the object name of your data and the target path as input. If you want to save the file to your working directory, you can simply provide the desired file name with a csv extension instead of an entire path as input. If your data set does not contain rownames, setting row.names to FALSE makes sure that the function does not add an additional index column to your csv file.\n\nwrite.csv(df, \"path/df.csv\")\nwrite.csv(df, \"df.csv\", row.names = FALSE)\n\nYou can also save your data as an excel file using the write.xlsx() from the ‘xlsx’ package.\n\nwrite.xlsx(df, path, sheetName = \"Sheet1\", \n  col.names = TRUE, row.names = FALSE, append = FALSE)\n\nTo get a first glimpse of a data set summary() is a good start. Additional options include str(), glimpse() from the ‘tidyverse’ package, skim() from the ‘skimr’ package, and look_for() from the ‘labelled’ package. All three functions take data sets as input. To get the distribution of a single variable you can call the variable using df$variable.\n\nsummary(df$variable)\n\nTo get the number of observation in your dataset you can use the nrow() command.\n\nnrow(df)\n\nOften, data sets will contain missing data. To check if data are missing in a specific variable you can make use of the logical argument is.na() , which checks if data is missing (NA) and if it is, returns TRUE.\n\nsum(is.na(df$variable))\n\nYou can add labels to variables using the label() command from the package ‘Hmisc’.\n\nHmisc::label(df$variable) <- \"label\"\n\n\n\n\n\nThroughout this workshop you will deal with different data types. Data types determine what operations or functions you can and cannot use with your data. To determine the data type of an object you can use class() or typeof(). We continue to use our object with name ‘df’ and variable name ‘variable’.\n\nclass(df$variable)\n\n\n\nNumeric data includes data of type double, integer and float. In the code below, you will see that our input is numeric.\n\nclass(5)\n\n[1] \"numeric\"\n\ntypeof(5)\n\n[1] \"double\"\n\n\nYou can do a number of operations using numeric data in R. The most basic ones include summation, multiplication, subtraction, and division.\n\n5+2\n\n[1] 7\n\n5*2\n\n[1] 10\n\n5-2\n\n[1] 3\n\n5/2\n\n[1] 2.5\n\n\nR also allows you to do slightly more advanced calculations involving squares, roots, logarithms, and exponentials.\n\n9**2\n\n[1] 81\n\nsqrt(9)\n\n[1] 3\n\nlog(1)\n\n[1] 0\n\nexp(1)\n\n[1] 2.718282\n\n\nMoreover, you can easily call scientific constants in R.\n\npi\n\n[1] 3.141593\n\n\nIn order to turn an object or variable into a numeric one you can use as.numeric(). The function takes an object of any type as input and coerces it to numeric\n\nas.numeric(\"5\")\n\n[1] 5\n\nas.numeric(TRUE)\n\n[1] 1\n\n\nNote that as.integer() is also a suitable alternative in this case, but be aware that if you use as.integer() R will automatically cut off the decimal part.\n\nas.integer(\"5\")\n\n[1] 5\n\nas.integer(2.34)\n\n[1] 2\n\n\n\n\n\nBesides numeric data, you will also encounter strings, which are sequences of characters. In R, characters are defined by their enclosure through single or double quotes\n\nclass(\"a\")\n\n[1] \"character\"\n\nclass('a')\n\n[1] \"character\"\n\n\nCharacters and strings can be concatenated using paste(). If you don’t want the strings to be seperated by a whitespace, you should use paste0() instead.\n\n\npaste(\"Hello\",\"World\")\n\n[1] \"Hello World\"\n\n\nThe number of characters in a string can be determined using nchar().\n\n\nnchar(\"five\")\n\n[1] 4\n\n\n\n\n\nLogical or boolean data is either TRUE or FALSE.\nSome operators include == (test of equality), > (greater than), >= (greater or equal than), < (smaller than), =< (smaller or equal than), != (inquality), as well as & (logical and) | (logical or), and ! (not).\nTo test if one numeric value is smaller than another you can use the following code:\n\n4<1\n\n[1] FALSE\n\nclass(4<1)\n\n[1] \"logical\"\n\n\nThis statement evaluates to FALSE. The data type of FALSE is logical.\nYou can connect logical statements and negate them.\n\n1==1&2==2\n\n[1] TRUE\n\n4<1|1>0\n\n[1] TRUE\n\n!TRUE\n\n[1] FALSE\n\n\nLast, you can test if one or more elements are in a vector using %in%\n\n1 %in% c(1,2,3)\n\n[1] TRUE\n\nc(1,4) %in% c(1,2,3)\n\n[1]  TRUE FALSE\n\n\n\n\n\nDates can be stored as strings but as soon as you want to work with a date, storing it as a string becomes inconvenient. Instead, dates have their own class. The as.Date() takes a string as input and coerces it into a ‘Date’ type object.\n\n\"01/01/2022\"\n\n[1] \"01/01/2022\"\n\nclass(\"01/01/2022\")\n\n[1] \"character\"\n\nclass(as.Date(\"01/01/2022\"))\n\n[1] \"Date\"\n\n\n\n\n\nVectors are one dimensional data structures in R. Unless the vector is empty, it contains elements. If all elements are of the same kind, the vector is called an atomic vector. is.atomic() tests whether a vector is atomic. To create a vector c() can be use. The class() is defined by its elements.\n\nc()\n\nNULL\n\nis.atomic(c(1,2,3))\n\n[1] TRUE\n\nclass(c(1,2,3))\n\n[1] \"numeric\"\n\n\nVectors are flat data structures. That means c(c()) will not result in a vector within a vector but rather one vector. If both vectors contain elements, they will be merged into one vector.\n\n\n\nLists are also one dimensional data structure. Unlike atomic vectors, they can contain different kinds of elements, including other lists. A new list is intialized using the list() command.\n\nlist()\n\nlist()\n\nclass(list(1, \"Berlin\", 2.3, list(1,2,3)))\n\n[1] \"list\"\n\n\n\n\n\nA factor is a vector that is used to store categorical elements. The possible values or ‘levels’ are predefined. Each level can have a descriptor. The descriptor is called a ‘label’ and is of type string. Factors are intialized using factor(). The only required input is the data vector. We will also specify the levels and labels in our example.\n\nfactor(c(0,1,1,0), levels = c(0,1), labels = c(\"m\", \"f\"))\n\n[1] m f f m\nLevels: m f\n\nclass(factor(c(0,1,1,0), levels = c(0,1), labels = c(\"m\", \"f\"))\n)\n\n[1] \"factor\"\n\n\n\n\n\nMatrices are two dimensional data objects (meaning they can be arranged in rows and columns). They are intialized using the matrix() command. The input includes a vector, the number of rows, the number of columns, and the byrow option that can be set to true or false.\n\nmatrix(c(1,2,3,4,5,6,7,8), nrow = 2, ncol = 4)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    5    7\n[2,]    2    4    6    8\n\nclass(matrix(c(1,2,3,4,5,6,7,8), nrow = 2, ncol = 4))\n\n[1] \"matrix\" \"array\" \n\n\n\n\n\nLike matrices, data frames are two dimensional objects. They organize data into rows and columns.\n\ndata.frame(x = 1:3, y = c(\"berlin\", \"paris\", \"rome\"))\n\n  x      y\n1 1 berlin\n2 2  paris\n3 3   rome\n\nclass(data.frame(x = 1:3, y = c(\"berlin\", \"paris\", \"rome\")))\n\n[1] \"data.frame\"\n\n\nYou can combine data frames using cbind() or rbind(). cbind() combines the columns of the data frames and rbind() combines the rows of the data frames.\n\ncbind(data.frame(x = 1:3, y = c(\"berlin\", \"paris\", \"rome\")), \ndata.frame(z= c(\"bmw\", \"peugot\", \"fiat\")))\n\n  x      y      z\n1 1 berlin    bmw\n2 2  paris peugot\n3 3   rome   fiat\n\nrbind(data.frame(x = 1:3, y = c(\"berlin\", \"paris\", \"rome\")), \ndata.frame(x= 4:5, y = c(\"stockholm\", \"london\")))\n\n  x         y\n1 1    berlin\n2 2     paris\n3 3      rome\n4 4 stockholm\n5 5    london\n\n\nYou can access columns of a data frame using $ or by their index. The index for any element is based on its position in the data frame. The index is written in brackets and the row number is entered first, then a comma, and then the column number. If you want to access all rows you simply omit the row number and just specify the columns.\n\ndf <- cbind(data.frame(x = 1:3, y = c(\"berlin\", \"paris\", \"rome\")), \ndata.frame(z= c(\"bmw\", \"peugot\", \"fiat\")))\n\ndf$y\n\n[1] \"berlin\" \"paris\"  \"rome\"  \n\ndf[,2]\n\n[1] \"berlin\" \"paris\"  \"rome\"  \n\n\n\n\n\n\nAfter importing and inspecting a data set, you might need to prepare the data for analysis. This process is often called data cleaning or data management (see also Statistics Netherlands).\nYou want to get from : * Raw data to * Technically correct data to * Consistent data that is ready for analysis\nMoving from raw data to technically correct data, you need to ensure that each variable (or column) is of the correct data type. That means all text data should be stored as strings, all categorical data should be stored as factors, and all numeric data should be stored as such.\nTo get consistent data that is ready for analysis, you need to deal with duplicated and missing data, identify outliers, and fix inconsistencies in the data. The following brief examples provide code snippets for common data for each of the tasks.\n\n\nTo identify rows that contain missing values you can subset the data using the logical test complete.cases() from the stats package.\n\ndf[!complete.cases(df),]\n\nIf you wish to omit missing data, you can use the na.omit() command. This will remove all rows with missing data. Beware, this can introduce bias in you analysis!\n\n\n\nThe following code identifies rows in the data set ‘df’ for which values of the variable ‘variable’ are potential outliers.\n\noutliers <- boxplot.stats(df$variable)$out\nrows <- which(dat$hwy %in% c(outliers))\ndf[rows,]\n\n\n\n\nSometimes there are issues with our data. Variable names need to be changed, factors recoded, or values changed. R offers a suit of functions to fix these issues.\nRenaming a variable can be done in a number of ways. Here we focus on the base R and the ‘tidyverse’ solution. The first option uses the names() command, which defines the variable names for the data frame. We thus reassign the variable names using <-. Note that the vector of new names needs to be as long as the vector of old names (in other words you need to specify all names). The rename() command from the ‘tidyverse’ package takes the data set as input and the new and old variable names. Note that variable names are not in quotes and the number of variables you want to change can vary.\n\nnames(df) <- c(\"new_var1\", \"new_var2\", \"new_var3\")\n\nrename(df, new_var1 = old_var1, new_var2 = old_var2)\n\nIf you wish to create a new variable you can simly add a column to your data set or use mutate() from the ‘tidyverse’ package. Note that the added column needs to have the same length as the other columns. For both options, if you just enter one value, the value you is repeated for the length of the original data set.\n\ndf$new_var <- c(new_value, new_value, new_value)\n\nmutate(df, new_var = c(new_value, new_value, new_value))\n\nIf you wish to change the value of an exisiting variable you can use base R or mutate mutate() from the ‘tidyverse’ package again. The base R solution subsets the data and then overwrites the exisiting old values by the new ones. As you can see we are using a logical statement to subset the data (i.e. testing whether old_var is equal to old_value).\n\ndf$old_var[df$old_var == old_value] <- new_value\n\nNote that you can also replace values conditional on their existing value using ifelse(). ifelse() tests a logical statement (e.g. the old_var is equal to old_value). If this is true, it will do something (e.g. replace the value with new_value). If it is false it will do something else (e.g. keep the value from old_var).\n\nmutate(df, old_var = c(new_value, new_value, new_value))\n\nmutate(df, old_var = ifelse(old_var == old_value, new_value, old_var))\n\nAlternatively, you can use recode(). Note that numeric data will have to be wrapped in . This also works for factor variables, automatically adjusting the levels.\n\ndf$old_var <- recode(df$old_var, old_value1 = new_value1, old_value2 = new_value2)"
  },
  {
    "objectID": "basics.html#basic-introduction-to-stata",
    "href": "basics.html#basic-introduction-to-stata",
    "title": "Basics",
    "section": "Basic introduction to Stata",
    "text": "Basic introduction to Stata\n\nWorkflow in Stata\n\nWorking directory\nSimilar to R, the working directory in Stata can organize your work allow you to access data and do-files easier.\nTo get your current working directory in Stata, use the pwd command.\n\npwd\n\nTo set a new working directory in Stata, use the cd command. Note that if your path contains a blank space, you need to wrap the path in quotes.\n\ncd path\n\n\n\nDo-Files\nStata’s do-file is a text document that contains your reproducible code. To call the do file you can use the command doedit or click on ‘File’ in the top left corner of your Stata window and select ‘Do…’.\nYou can edit the do-file through the Do-File Editor like a regular text document and save your commands as you would in any other file. You can execute your code by pressing ‘Execute (do)’ button. This also works for selected chunks of the code that you highlighted before pressing the ‘Execute (do)’ button.\nEvery do-file typically starts with clear all to clear clear Stata of any stray data or results.\n\n\nImporting data\nTo import data into stata you can use the use command. If the data file is in your working directory, you can simply provide the file name. If it is not, you need to specify the exact path. If the path (or the file name) contains spaces, it needs to be enclosed in quotes.\n\nuse path\n\n\nImporting CSV files\n\nimport delimited path\n\nLike R, Stata allows you to import files from the web. Simply replace the path with the url.\n\nimport delimited url\n\n\n\nImporting Excel files\nYou can import Excel files using the import excel command.\n\nimport excel path\n\n\n\nImporting SPSS data\nYou can import SPSS files using the import spss command.\n\nimport spss path\n\n\n\nImporting SAS data\nYou can import SPSS files using the import sas command.\n\nimport sas path\n\n\n\nImporting other data formats\nAdditional data formats can be found here.\n\n\nImporting data manually\nThere are a number of easy ways to manually import data into Stata. First, you can simply double click you data file with the .dta extension. If Stata is installed on your computer and set as a default to open .dta files, then it should open the data in Stata.\nSecond, you can click on ‘File’ in the top left corner, and select ‘Open…’, or use the Crtl+o shortcut. You can then select the file in the pop-up window.\nThird, files in formats other than .dta can be imported by clicking on ‘File’>‘Import’ and then selecting the needed file format.\n\n\n\nSave, export and inspect data\nYou can save or export data in Stata using the save command. You can specify replace to allow Stata to overwrite exisiting files.\n\nsave \"data\", replace\n\nData can be exported using the export command. The following code exports data to a CSV file.\n\nexport delimited\n\nYou can save the data as an Excel file using export excel.\n\nexport excel\n\nTo get a first glimpse of a data set in Stata you can use the summarize command. Additional options include describe, inspect, compact and codebook. All functions can be limited to just one, or any subset of variables in your data set. By using * substring * you can filter variables by a substring. For instance, if you are intersted in all treatment variables in a data set you could type\n\nds *treat*\n\nFor suvey data anlysis the codebook command is quite useful as it can be combined with a log file and saved separately for later use. The labelbook works similar and creates a printed listing of labels in the data set.\nOften, data sets will contain missing data. To check if data are missing in a specific variable you can make use of the mdesc command. mdesc is not part of Stata so it is needs to be installed using ssc install.\n\nssc install mdesc\nmdesc\n\nYou can add labels to variables using the label variable  command. In the snippet below we use variable1 as a place holder for the variable name and “label” as a place holder for the label name. The label name has to be provided in quotes.\n\nlabel variable variable1 \"label\"\n\n\n\n\nData cleaning in Stata\n\nMissing data\nIf you wish to omit missing data, you can use the drop if command. This will remove all rows with missing data in the specified column. Beware, this can introduce bias in you analysis!\n\ndrop if var==.\n\n\n\nIdentify potential outliers\nThe following code identifies rows in the data set ‘df’ for which values of the variable ‘variable’ are potential outliers.\n\n\n\n\n\nFix inconsistencies\nSometimes there are issues with our data. Variable names need to be changed, factors recoded, or values changed. R offers a suit of functions to fix these issues.\nStata contains a convenient feature that allows you to verify and thus check the quality of your data. Using the assert command, you can test if the variables are coded correctly. For instance, if the indicator variable for female only allows for female==0 for male, female==1 for female, and female ==. for missing data, the variable should reflect that. The lack of a return message indicates that there is no problem with the data.\n\nassert female == 0 | female == 1 \n\nThe label command can also be used to add labels to categorical variables.\n\nlabel define varlabel 1 label1 0 label2\nlabel values var varlabel\n\nYou can remove variables using the drop command. To remove several, sequential variables you simply type the first and the last variable to be removed and connect both using a hyphen.\n\ndrop var1 - var10\n\nRenaming a variable can be done through rename.\n\nrename old_name new_name\n\nIf you wish to create a new variable you can simply add a column to your data set. The gen will generate a new variable. In our example, we generate a variable with only missing values.\n\ngen new_var=.\n\nIf you wish to change the value of an exisiting variable you can use replace. In the example below we recode non-response (“NS”) as missing.\n\nreplace var=\".\" if var==\"NS\" \n\nIf you wish to change the variable encoding you can use recast or destring. The replace option overwrites the exisiting variable.\n\ndestring old_var, replace"
  },
  {
    "objectID": "basics.html#exercises",
    "href": "basics.html#exercises",
    "title": "Basics",
    "section": "Exercises",
    "text": "Exercises\nUsing the statistical program of your choosing\n\ndetermine your current working directory\n\nimport the csv from the GitHub repository for this workshop and save it to your working directory\n\nget a first glance of the data and determine the type of all variables in the data set\n\nadd the label “cardiovascular diseases” to the variable cardiovascular\nrename the variable “Heights..cm.” and move the unit of measurement to the label\ncheck for missing values for the variable rdt\nrecode “Currently have” and “Had, within 9 months” into “yes” for all variables describing symptoms\n\nSolution"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Additional Resources",
    "section": "",
    "text": "The guide An Introduction to R encompasses a lot of the material covered in this tutorial. The focus is on applications in base R, including data types, reading in data, basic statistics, and programming, as well as packages, and navigating OS facilities. This is a free resource directly from the R-Core Team, which maintains and distributes R.\n\n\n\nThe book Hands-on Programming with R provides a great introduction to R and programming in R. The link takes you to the free online online version of the book.\n\n\n\nThe Interactive R Tutorial is an interactive resource for learning R. It requires registration but is completely free and easily accessible. The course is self-paced and includes data preparation, cleaning, and the basics of data visualization in R.\n\n\n\nThe University of Washington offers a free online course covering the basics of R CSSS 508. The course page offers futher resources and great videos.\n\n\n\n\nThe Tidyverse is a fairly new environment in R. Its structure and logic differ quite substantially from base R and other packages in R. You might find it more intituitive than other packages.\n\n\nThis is the free online version of the book R for Data Science by Hadley Wickham and Garett Grolemund. It provides a holistic introduction to R in general and the tidyverse specifically. It includes topics such as data import, visualization, management, and modeling. It also provides an introduction to R Markdown, a way to produce pdf, html, or word documents using R Studio.\n\n\n\n\n\n\nThis is the free online version of the popular R Graphics Cookbook. The book offers a basic introduction into R, and graphing in R. It focusses on  ggplot(), the graphing function in tidyverse. It covers bar graphs, line graphs, scatter plots, summarized data distributions, annotations and output presentation among other things.\n\n\n\n\nR is not easy and sometimes some of the error messages you can get are cryptic. That is where the R community comes in. If you need help with errors, unintended output, or instructions, Stackoverflow, the R Studio Community Forum, Quick-R by Data Camp, Quick-R by Data Camp, R Bloggers, and ProgrammingR, are good resources to get support. Sometimes a quick google search might also do the trick."
  },
  {
    "objectID": "resources.html#stata",
    "href": "resources.html#stata",
    "title": "Additional Resources",
    "section": "Stata",
    "text": "Stata\n\nGeneral introductions/Free online courses\n\n\nTroubleshooting\nIf you have issues and or need instructions for Stata, the official Stata website provides help. Furthermore, Statalist is a helpful community resource for Stata users."
  }
]